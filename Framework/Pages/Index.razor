@page "/"
@using Framework.Slides
@using Framework.State
@using Framework.Game
@using Framework.Keyboard
@using Framework.Mouse
@using Framework.Sound
@using Framework.Video

@inject SlideService SlideService
@inject GameState GameState
@inject KeyboardService KeyboardService
@inject MouseService MouseService
@inject SoundService SoundService
@inject VideoService VideoService

@if (initTask.IsCompletedSuccessfully)
{
    if (gameStarted)
    {
        <Game Debug=@debugMode />
    }
    else
    {
        <div class="center-content">
            <h1 id="title">KSR Point and Click</h1>
            <button id="play_button" class="indy-button" @onclick="StartGame">Game</button>
            <a href="/testpage" class="indy-button">TestPage</a>
            <a href="/showcase" class="indy-button">Minigame Showcase</a>

            <div class="volume-slider">
                <p>Volume:</p>
                <label for="volume" class="volume-label">Volume:</label>
                <input type="range" id="volume" name="volume" min="0" max="100" @bind="@Volume" class="volume-range" />
                <span class="volume-value">@Volume</span>
            </div>
        </div>
    }
}
else
{
    <div class="loading">Loading...</div>
}

@code {
    private int Volume { get; set; } = 50;
    private TaskCompletionSource<bool> _tcs = new();
    private Task initTask => _tcs.Task;

    private bool gameStarted = false;

    private bool debugMode = true;

    protected override async Task OnInitializedAsync()
    {
        await GameState.LoadGameStateAndItemsAsync();
        await SlideService.Init(debugMode);
        await KeyboardService.Init();
        await MouseService.Init();
        await SoundService.Init();
        // Play the background track
        await SoundService.PlayMusic("/minigame_assets/LockPick_assets/audio/doom-soundtrack.wav");
        await VideoService.Init();
        _tcs.SetResult(true);
    }

    private void StartGame()
    {
        gameStarted = true;
    }
}
